import sqlite3
import click
from flask import current_app, g
""" g - это специальный объект, который уникален для каждого запроса. 
    Он используется для хранения данных, 
    к которым могут получить доступ несколько функций во время запроса. 
    Соединение сохраняется и используется повторно вместо создания нового соединения, 
    если get_db вызывается во второй раз в том же запросе. 
    
    current_app - это еще один специальный объект, 
    который указывает на приложение Flask, обрабатывающее запрос. 
    Поскольку использовали фабрику приложений, 
    при написании остальной части вашего кода объект приложения отсутствует. 
    get_db будет вызван, когда приложение будет создано и обрабатывает запрос, 
    поэтому можно использовать current_app."""

def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect(
            current_app.config['DATABASE'],
            detect_types=sqlite3.PARSE_DECLTYPES
        ) 
        """ устанавливает соединение с файлом, 
        на который указывает ключ конфигурации базы ДАННЫХ. 
        Этот файл еще не должен существовать и не будет существовать до тех пор, 
        пока вы не инициализируете базу данных позже. """
        
        g.db.row_factory = sqlite3.Row
        """ указывает соединению возвращать строки, 
        которые ведут себя как dicts. 
        Это позволяет получить доступ к столбцам по имени. """
    
    return g.db


""" проверяет, было ли создано соединение, проверяя, был ли установлен g.db. 
    Если соединение существует, оно закрывается. 
    сообщает приложению о функции close_db на фабрике приложений, 
    чтобы она вызывалась после каждого запроса. """
def close_db(e=None):
    db = g.pop('db', None)

    if db is not None:
        db.close()


def init_db():
    db = get_db()

    with current_app.open_resource('database.sql') as f:
        db.executescript(f.read().decode('utf-8'))


@click.command('init-db')
def init_db_command():
    init_db()
    click.echo('Инициализировал базу данных.')


def init_app(app):
    app.teardown_appcontext(close_db)
    """ сообщает Flask вызвать эту функцию при очистке после возврата ответа. """
    app.cli.add_command(init_db_command)
    """ добавляет новую команду, которую можно вызвать с помощью команды flask. """